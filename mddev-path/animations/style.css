body {
  display: grid;
  place-content: center;
  min-height: 50vh;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  font-size: 12px;
  gap: 32px;
}

hr {
  width: 100%;
}

.pulser {
  width: 50px;
  height: 50px;
  background: #09f;
  border-radius: 100%;
  position: relative;
  /* transition-duration: 1500ms; */
  /* transition-property: scale, background; In this case the transition is only applied to the scale and background properties. It's IMPORTANT for performance  */
  /* transition-timing-function: ease-out;  */

  /* ease-in: start slow */
  /* ease-out: start fast */
  /* ease-in-out: start and end slow */
  /* ease: it's like ease-in-out but start a little bit faster */

  /* steps(5): make the animation in 5 steps */
  /* cubic-bezier(x1, y1, x2, y2): customize the animation's cubic bezier curve (see the developers tools in transition-timing-function property */
  /* transition-delay: 0s; time at which the animation starts */

  /* transition: 
    background 300ms ease-out 200ms,
    scale 500ms ease-in-out,
    box-shadow 1s ease; */

  transition: all 300ms ease-in-out; /*  final state - time of the last animation (the second part) */
}

.pulser:hover {
  scale: 2;
  background: red;
  box-shadow: 0 0 10px red;
  /* transition-duration: 500ms; /* ‚ùå: sometimes this works but in this case (circle grow and change the color) we need that the animation is performed in both directions */
  transition-duration: 1s; /* Time of the fist animation */
}

@media (prefers-reduced-motion: reduce) { /* To keep in mind for accesibility */
  .pulser {
    transition: none;
  }
}

/* transition-delay property in action */
.container2 {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 16px;
}

.pulser1 {
  width: 50px;
  height: 50px;
  background: #09f;
  border-radius: 100%;
  position: relative;
  transition-duration: 1500ms;
  transition-timing-function: ease;
  opacity: 0;
}

.container2:hover .pulser1 {
  opacity: 1;
}

.pulser1:first-child {
  transition-delay: 0s;
}

.pulser1:nth-child(2) {
  transition-delay: 400ms;
}

.pulser1:last-child {
  transition-delay: 800ms;
}

/* Animations */

.pulser2 {
  width: 50px;
  height: 50px;
  background: #09f;
  border-radius: 100%;
  position: relative;
  /* animation-name: move; */
  /* animation-duration: 2s; */
}

.pulser2:hover {
  animation-name: move;
  animation-duration: 2s;
}

@keyframes move {
  from {
    transform: translateY(0px);
  }

  to {
    transform: translateY(50px);
  }
}

/* Animations: example 2 */
.pulser3 {
  width: 50px;
  height: 50px;
  background: #09f;
  border-radius: 100%;
  position: relative;
}

.pulser3::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background: #09f;
  border-radius: 100%;
  z-index: -1;

  animation-name: pulse;
  animation-duration: 2s;
  animation-delay: 3s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: 5;
  /* animation-iteration-count: infinite; never stop */
}

@keyframes pulse {
  0% {
    opacity: 0;
  }

  50% {
    scale: 1.5;
    opacity: 20%;
  }

  100% {
    opacity: 35%;
  }
}

/* Animations: example 3 - direction */

.container5 img {
  width: 80px;
  /* animation-name: move-mario; */
  /* animation-duration: 2s; */
  /* animation-timing-function: linear; */

  /* animation-direction: reverse; */
  /* animation-direction: alternate; */
  /* animation-direction: normal; default value */

  /* animation-iteration-count: infinite; */

  /* Indicate the behavior before and after the animation */
  /* animation-fill-mode: both; */

  /* Animation shorcut */
  animation: 
    move-mario 2s steps(120) both,
    bigger 1s linear 2s both;

  /* To pause the animation when I hover */
  &:hover {
    animation-play-state: paused;
    opacity: 70%;
    filter: contrast(100%);
    cursor: progress;
  }
}

@keyframes move-mario {
  /* To keep in mind: I can omit the 'from' if the values that the element has are the default values */
  from {
    transform: translateX(0);
  } 

  to {
    transform: translateX(200px);
  }
}

@keyframes bigger {
  0% {
    scale: 1;
  }

  25% {
    scale: 1.4;
  }

  50% {
    scale: 2;
  }

  75% {
    scale: 1.6;
  }

  100% {
    scale: 2;
  }
}